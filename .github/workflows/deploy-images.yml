name: Deploy Docker Images

on:
  workflow_dispatch:
    inputs:
      image-version:
        type: string
        description: Exact image version
        required: false
      log-level:
        type: choice
        options:
          - NOTSET
          - DEBUG
          - INFO
          - WARNING
          - ERROR
          - CRITICAL
        default: INFO
        description: Logging level.
        required: false
      openai-default-model:
        type: choice
        options:
          - gpt-4o
          - gpt-3.5-turbo
          - gpt-3.5-turbo-0301
          - gpt-4
          - gpt-4-0314
          - gpt-4-32k
          - gpt-4-32k-0314
        default: gpt-3.5-turbo
        description: Default chat completion model on new user session.
        required: false
      openai-default-temperature:
        type: number
        default: 1.0
        description: Default creativity (from 0.0 to 2.0) on new user session.
        required: false
      openai-default-max-tokens:
        type: number
        default: 4097
        description: Default limit of tokens on new user session.
        required: false
      openai-default-max-messages:
        type: number
        default: 6
        description: Default limit of context.
        required: false

permissions:
  contents: read
  packages: write

env:
  PRODUCT_NAME: bot-openai
  SSH_KEY_NAME: id_rsa
  REDIS_HOST: bot-openai-redis
  REDIS_PORT: 6380
  REDIS_VERSION: 7.2.7-alpine3.21
  DEPLOY_PATH: /root/bot-openai

jobs:
  deploy-bot:
    if: inputs.image-version || github.ref_type == 'tag'
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4.2.2
    - name: Get Docker image tag for ghcr.io
      id: docker-image-tag
      uses: Danand/docker-image-tag@v2-rc.8
      with:
        product-name: ${{ env.PRODUCT_NAME }}
        input-version: ${{ inputs.image-version || github.ref_name }}
    - name: Deploy image of service
      shell: bash
      run: |
        rm -f ${{ env.SSH_KEY_NAME }}
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ${{ env.SSH_KEY_NAME }}
        chmod 600 ${{ env.SSH_KEY_NAME }}
        ssh \
          -o StrictHostKeyChecking=no \
          -i ${{ env.SSH_KEY_NAME }} \
          root@${{ secrets.HOST_PUBLIC_IP }} \
          "\
            cd ${{ env.DEPLOY_PATH }} && \
            (docker-compose stop &>/dev/null || true) && \
            (docker-compose rm &>/dev/null || true) && \
            rm -rf ${{ env.DEPLOY_PATH }} ; \
            mkdir -p ${{ env.DEPLOY_PATH }} \
          "
        scp \
          -o StrictHostKeyChecking=no \
          -i ${{ env.SSH_KEY_NAME }} \
          docker-compose.yml \
          root@${{ secrets.HOST_PUBLIC_IP }}:${{ env.DEPLOY_PATH }}/docker-compose.yml
        scp \
          -o StrictHostKeyChecking=no \
          -i ${{ env.SSH_KEY_NAME }} \
          docker-compose-deploy.yml \
          root@${{ secrets.HOST_PUBLIC_IP }}:${{ env.DEPLOY_PATH }}/docker-compose-deploy.yml
        ssh \
          -o StrictHostKeyChecking=no \
          -i ${{ env.SSH_KEY_NAME }} \
          root@${{ secrets.HOST_PUBLIC_IP }} \
          "\
            docker login \
              --username ${{ github.repository_owner }} \
              --password ${{ secrets.GITHUB_TOKEN }} \
              ghcr.io && \
            cd ${{ env.DEPLOY_PATH }} && \
            echo "LOG_LEVEL=\"${{ inputs.log-level }}\"" > .env && \
            echo "TELEGRAM_API_TOKEN=\"${{ secrets.TELEGRAM_API_TOKEN }}\"" >> .env && \
            echo "TELEGRAM_WHITELISTED_USERS=\"${{ secrets.TELEGRAM_WHITELISTED_USERS }}\"" >> .env && \
            echo "OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\"" >> .env && \
            echo "OPENAI_DEFAULT_MODEL=\"${{ inputs.openai-default-model }}\"" >> .env && \
            echo "OPENAI_DEFAULT_TEMPERATURE=\"${{ inputs.openai-default-temperature }}\"" >> .env && \
            echo "OPENAI_DEFAULT_MAX_TOKENS=\"${{ inputs.openai-default-max-tokens }}\"" >> .env && \
            echo "OPENAI_DEFAULT_MAX_MESSAGES=\"${{ inputs.openai-default-max-messages }}\"" >> .env && \
            echo "REDIS_HOST=\"${{ env.REDIS_HOST }}\"" >> .env && \
            echo "REDIS_PORT=\"${{ env.REDIS_PORT }}\"" >> .env && \
            echo "REDIS_VERSION=\"${{ env.REDIS_VERSION }}\"" >> .env && \
            echo "BOT_IMAGE_NAME=\"${{ steps.docker-image-tag.outputs.image-tag }}\"" >> .env && \
            docker-compose \
              --file="docker-compose.yml" \
              --file="docker-compose-deploy.yml" \
              --env-file=".env" \
              up \
              --detach \
              --build \
              --force-recreate \
          "
        rm ${{ env.SSH_KEY_NAME }}
